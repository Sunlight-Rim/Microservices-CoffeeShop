syntax = "proto3";

package orders;

import "google/protobuf/timestamp.proto";
import "internal/orders/proto/annotations.proto";
// import "internal/orders/proto/options.annotations.proto";

option go_package = ".;orders_pb";


service OrdersService {
    rpc Create (CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/"
            body: "coffees"
        };
        // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        //     parameters: {
        //         headers: {
        //             name: "Authorization";
        //             type: STRING,
        //             required: true;
        //         };
        //     };
        // };
    };
    rpc Get (GetOrderRequest) returns (GetOrderResponse) {
        option (google.api.http) = {
            get: "/{id}"
        };
    };
    rpc List (ListOrderRequest) returns (ListOrderResponse) {
        option (google.api.http) = {
            get: "/"
        };
    };
    rpc Update (UpdateOrderRequest) returns (UpdateOrderResponse) {
        option (google.api.http) = {
            patch: "/{id}"
            body: "*"
        };
    };
    rpc Delete (DeleteOrderRequest) returns (DeleteOrderResponse) {
        option (google.api.http) = {
            delete: "/{id}"
        };
    };
}

message Coffee {
    string type = 1;
    int32 sugar = 2;
}

message Order {
    enum Status {
        PENDING = 0;
        DELIVERED = 1;
    }
    int64 id = 1;
    int64 userid = 2;
    Status status = 3;
    google.protobuf.Timestamp date = 4;
    repeated Coffee coffees = 5;
    float total = 6;
}

// Create

message CreateOrderRequest {
    int64 userid = 1;
    repeated Coffee coffees = 2;
}

message CreateOrderResponse {
    Order order = 1;
}

// Get

message GetOrderRequest {
    int64 userid = 1;
    int64 id = 2;
}

message GetOrderResponse {
    Order order = 1;
}

// List

message ListOrderRequest {
    int64 userid = 1;
    int32 shift = 2;
}

message ListOrderResponse {
    repeated Order orders = 1;
}

// Update

message UpdateOrderRequest {
    int64 userid = 1;
    int64 id = 2;
    repeated Coffee coffees = 3;
}

message UpdateOrderResponse {
    Order order = 1;
}

// Delete

message DeleteOrderRequest {
    int64 userid = 1;
    int64 id = 2;
}

message DeleteOrderResponse {
    Order order = 1;
}